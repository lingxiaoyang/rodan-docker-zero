version: "3"
services:
  rodan-client:
    build:
      context: ./rodan-client
      args:
        DEV_JSPM_GITHUB_AUTH_TOKEN: ${DEV_JSPM_GITHUB_AUTH_TOKEN}
    container_name: rodan-client
    environment:
      - RODAN_CLIENT_DEVELOP_HOST=rodan-client
    ports:
      - "8081:9002"
    restart: always
  rodan-server:
    build:
      context: ./rodan
    command: bash -c "./manage.py check && yes | ./manage.py migrate && ./manage.py runserver 0.0.0.0:8080"
    container_name: rodan-server
    depends_on:
      # Run RabbitMQ to ensure this test doesn't fail:
      #   test_cancel_retry_redo (Rodan.rodan.test.views.test_workflowrun.WorkflowRunSimpleExecutionTest)
      - rabbitmq
      - postgres
      - redis
    environment:
      - DJANGO_ADMIN_URL=django_admin
      - DJANGO_DEBUG_MODE=${DEBUG}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_DB=${RODAN_POSTGRES_DB}
      - POSTGRES_USER=${RODAN_POSTGRES_USER}
      - POSTGRES_PASSWORD=${RODAN_POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - RODAN_PSQL_SUPERUSER_USERNAME=${RODAN_POSTGRES_SUPERUSER}
      - RODAN_PSQL_SUPERUSER_PASSWORD=${RODAN_POSTGRES_SUPERUSER_PASSWORD}
      - DJANGO_MEDIA_ROOT=
      - DJANGO_ALLOWED_HOSTS=${HOSTNAME}
      - SSL_COOKIE=False
      - SSL_COOKIE_DOMAIN=${HOSTNAME}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - RABBITMQ_URL=amqp://${RODAN_AMQP_USER}:${RODAN_AMQP_PASSWORD}@rabbitmq:5672/${RODAN_AMQP_VHOST}
      - CELERY_JOB_QUEUE=${CELERY_JOB_QUEUE}
    networks:
      - internal_rodan
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - ./rodan/dev_settings:/dev_settings
      - ./rodan/Rodan:/srv/Rodan
      - ./var/log:/code/Rodan
      - ./var/projects:/srv/Rodan/projects
  rabbitmq:
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RODAN_AMQP_USER}
      - RABBITMQ_DEFAULT_PASS=${RODAN_AMQP_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RODAN_AMQP_VHOST}
    expose:
      - "5672"
    image: rabbitmq:3.7
    networks:
      - internal_rodan
    restart: always
  redis:
    container_name: redis
    expose:
      - "6379"
    image: redis:5.0
    networks:
      - internal_rodan
  postgres:
    build: ./postgres
    container_name: postgres
    environment:
      - POSTGRES_USER=${RODAN_POSTGRES_SUPERUSER}
      - POSTGRES_PASSWORD=${RODAN_POSTGRES_SUPERUSER_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/rodan
      - RODAN_POSTGRES_DB=${RODAN_POSTGRES_DB}
      - RODAN_POSTGRES_USER=${RODAN_POSTGRES_USER}
      - RODAN_POSTGRES_PASSWORD=${RODAN_POSTGRES_PASSWORD}
    networks:
      - internal_rodan
    restart: always
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./var/postgres:/var/lib/postgresql/data/rodan
networks:
  internal_rodan:
